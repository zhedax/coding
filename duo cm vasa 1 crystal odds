#include <iostream>
#include <fstream>
#include <iomanip>
#include <math.h>
#include <time.h>
#include <stdlib.h>
#include <string>
#include <locale>
using namespace std;
#include <random>

random_device rd;
mt19937 gen(time(NULL));

// ------------------------------------- FUNCTIONS -------------------------------------------- //
// function to outline numbers with thousand separators in output
struct separate_thousands : std::numpunct<char>
{
    char_type do_thousands_sep() const override { return '`'; }  // separate with commas
    string_type do_grouping() const override { return "\3"; } // groups of 3 digit
};

// function to generate random number in some interval
int getRandom(int from, int to)
{
    uniform_int_distribution<int> distribution(from,to);
	return distribution(gen);
}

// max def roll function
int maxdefroll (int deflevel, int defbonuses)
{
    return (deflevel + 9) * (defbonuses + 64);
}

// spec weapons dpa function
int hit(int atk, int def, int maks)
{
    double attroll = getRandom(0, atk);
    double defroll = getRandom(0, def);
    int temp = 0;

	if ( attroll > defroll )
    {
        temp = getRandom(0, maks);
        return temp;
    }
	else return 0;
}

// zaryte spec roll function
int zaryte(int atk, int def)
{
    double attroll = getRandom(0, atk);
    double defroll = getRandom(0, def);
    int temp = 0;

	if ( attroll > defroll )
    {
        temp = 110;
        return temp;
    }
	else return 0;
}

int main ()
{
    // player info - anonim
    int zcbrollanonim = 35840*2; // no rigour
    int tbowrolla = 51072+0*1489; int tbowmaxa = 94;
    // player info - sleep
    int zcbrollsleep = 43624*2;
    int tbowrolls = 52561; int tbowmaxs = 96;
    int zcbhit = 110;

    // vasa info

    int loops = 1000000;
    int success = 0;
    int fail = 0;
    for (int j = 1; j <= loops; j++)
    {
        int dpa = 0;
        int vasahp = 900; // duo scale
        int vasadeflvl = 264; int vasarangedefbonus = 60;
        vasahp = 900; // veng dmg

    // zcb specs
        dpa = zaryte(zcbrollsleep, maxdefroll(vasadeflvl, vasarangedefbonus));
        vasahp = vasahp - dpa;
        
        dpa = zaryte(zcbrollanonim, maxdefroll(vasadeflvl, vasarangedefbonus));
        vasahp = vasahp - dpa;
        
    // tbow goes kaboom
        for (int i = 1; i <= 10; i++)
        {
            dpa = hit(tbowrolla, maxdefroll(vasadeflvl, vasarangedefbonus), tbowmaxa);
            if (dpa > 0) vasahp = vasahp - dpa;
            dpa = hit(tbowrolls, maxdefroll(vasadeflvl, vasarangedefbonus), tbowmaxs);
            if (dpa > 0) vasahp = vasahp - dpa;
        }
        if (vasahp < 0)
        {
            success = success + 1;
            
        }
        else fail = fail + 1;
    }
    double percent = (double)success / loops * 100;
    double oneinx = 1 / (percent/100);
    cout << "simulation ran for " << loops << " times to kill vasa before it touches 2nd crystal." << endl;
    cout << "Vasa was killed " << success << " times before it touched crystal 2nd time out of " << loops << " times." << endl;
    cout << "Chance getting 1 crystal vasa is " << setprecision(3) << percent << "% or 1 in " << oneinx << endl;
}
    
